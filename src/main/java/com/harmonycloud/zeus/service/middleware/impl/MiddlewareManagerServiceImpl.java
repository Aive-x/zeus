package com.harmonycloud.zeus.service.middleware.impl;import java.io.File;import java.io.IOException;import java.util.Comparator;import java.util.List;import java.util.Map;import java.util.stream.Collectors;import com.harmonycloud.zeus.bean.BeanClusterMiddlewareInfo;import com.harmonycloud.zeus.bean.BeanMiddlewareInfo;import com.harmonycloud.zeus.service.k8s.ClusterService;import org.apache.commons.io.FileUtils;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.CollectionUtils;import org.springframework.web.multipart.MultipartFile;import com.harmonycloud.caas.common.enums.ErrorMessage;import com.harmonycloud.caas.common.exception.BusinessException;import com.harmonycloud.caas.common.model.registry.HelmChartFile;import com.harmonycloud.tool.file.FileUtil;import com.harmonycloud.zeus.service.AbstractBaseService;import com.harmonycloud.zeus.service.middleware.MiddlewareAlertsService;import com.harmonycloud.zeus.service.middleware.MiddlewareCustomConfigService;import com.harmonycloud.zeus.service.middleware.MiddlewareInfoService;import com.harmonycloud.zeus.service.middleware.MiddlewareManagerService;import com.harmonycloud.zeus.service.registry.HelmChartService;import lombok.extern.slf4j.Slf4j;/** * @Author: zack chen * @Date: 2021/5/14 11:00 上午 */@Slf4j@Service@Transactional(rollbackFor = {RuntimeException.class})public class MiddlewareManagerServiceImpl extends AbstractBaseService implements MiddlewareManagerService {    @Value("${system.upload.path:/usr/local/zeus-pv/upload}")    private String uploadPath;    @Value("${system.images.path:/usr/local/zeus-pv/images/middleware}")    private String imagePath;    @Value("${k8s.component.helm:/usr/local/zeus-pv/helm}")    private String helmPath;    @Value("${k8s.component.middleware:/usr/local/zeus-pv/middleware}")    private String middlewarePath;    @Autowired    private HelmChartService helmChartService;    @Autowired    private MiddlewareAlertsService middlewareAlertsService;    @Autowired    private MiddlewareCustomConfigService middlewareCustomConfigService;    @Autowired    private MiddlewareInfoService middlewareInfoService;    @Autowired    private ClusterMiddlewareInfoServiceImpl clusterMiddlewareInfoService;    @Autowired    private ClusterService clusterService;    /**     * 中间件上架     * @param clusterId     * @param fileIn     */    @Override    public void upload(String clusterId, MultipartFile fileIn) {        File tempStoredFile = null;        File tarFileDir = null;        try {            long tempId = System.currentTimeMillis();            // 临时保存到本地            String fileName = fileIn.getOriginalFilename();            String tempDirPath = uploadPath + File.separator + "temp" + File.separator + tempId;            tarFileDir = new File(tempDirPath);            if (!tarFileDir.exists() && !tarFileDir.mkdirs()) {                throw new BusinessException(ErrorMessage.CREATE_TEMPORARY_FILE_ERROR);            }            tempStoredFile = new File(tempDirPath + File.separator + fileName);            fileIn.transferTo(tempStoredFile);            // 解析包并入库信息.根据包名称版本进行更新            HelmChartFile helmChartFile = helmChartService.getHelmChartFromFile("", "", tempStoredFile);            // 更新告警规则和自定义配置至数据库            update2Mysql(helmChartFile);            // 将helm chart信息 存入数据库            middlewareInfoService.insert(helmChartFile, tempStoredFile, clusterId);        } catch (IOException e) {            log.error("error when create temp file!", e);        } finally {            FileUtil.deleteFile(tarFileDir);        }    }    @Override    public void install(String clusterId, String chartName, String chartVersion) throws Exception {        HelmChartFile chartFile = helmChartService.getHelmChartFromMysql(chartName, chartVersion);        helmChartService.createOperator(uploadPath, clusterId, chartFile);    }    @Override    public void delete(String clusterId, String chartName, String chartVersion) {        List<BeanMiddlewareInfo> mwInfoList = middlewareInfoService.listByType(chartName);        Map<String, BeanMiddlewareInfo> mwInfoMap =            mwInfoList.stream().collect(Collectors.toMap(BeanMiddlewareInfo::getChartVersion, info -> info));        if (StringUtils.isNotEmpty(mwInfoMap.get(chartVersion).getOperatorName())) {            helmChartService.uninstall(clusterService.findById(clusterId), "middleware-operator",                    mwInfoMap.get(chartVersion).getOperatorName());        }        clusterMiddlewareInfoService.delete(clusterId, chartName, chartVersion);        //重新写入未安装的最新中间件信息        mwInfoList.sort(Comparator.comparing(BeanMiddlewareInfo::getChartVersion));        BeanClusterMiddlewareInfo clusterMwInfo = new BeanClusterMiddlewareInfo();        clusterMwInfo.setClusterId(clusterId);        clusterMwInfo.setChartName(mwInfoList.get(0).getChartName());        clusterMwInfo.setChartVersion(mwInfoList.get(0).getChartVersion());        clusterMwInfo.setStatus(2);        clusterMiddlewareInfoService.insert(clusterMwInfo);    }    @Override    public void update(String clusterId, String chartName, String chartVersion) {    }    /**     * 更新数据至数据库     */    public void update2Mysql(HelmChartFile helmChart) {        try {            middlewareAlertsService.updateAlerts2Mysql(helmChart);        } catch (Exception e) {            log.error("更新告警规则至数据库失败");        }        try {            middlewareCustomConfigService.updateConfig2MySQL(helmChart);        } catch (Exception e) {            log.error("更新自定义配置至数据库失败");        }    }}