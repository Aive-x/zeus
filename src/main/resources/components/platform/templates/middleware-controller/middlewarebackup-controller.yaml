apiVersion: v1
kind: ServiceAccount
metadata:
  name: middlewarebackup-controller
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: middlewarebackup-controller
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - get
  - list
  - patch
  - update
  - watch
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: middlewarebackup-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: middlewarebackup-controller
subjects:
- kind: ServiceAccount
  name: middlewarebackup-controller
  namespace: {{ .Release.Namespace | quote }}
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: backup-controller
  name: middlewarebackup-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: backup-controller
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        control-plane: backup-controller
    spec:
      containers:
      - args:
        - --leader-elect
        command:
        - /manager
        image: "{{ .Values.global.repository }}/{{ .Values.global.middlewarebackup_controller.image }}:{{ .Values.global.middlewarebackup_controller.tag }}"
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 8087
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 1
        name: manager
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readyz
            port: 8087
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          {{- toYaml .Values.global.middlewarebackup_controller.resources | nindent 12 }}
        securityContext:
          allowPrivilegeEscalation: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      {{- with .Values.global.middlewarebackup_controller.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        runAsNonRoot: true
      serviceAccount: middlewarebackup-controller
      serviceAccountName: middlewarebackup-controller
      terminationGracePeriodSeconds: 10
